@model List<Message>
@{
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var chatUser = ViewBag.ChatUser;
    var pinnedMessage = ViewBag.PinnedMessage as Message;
}


<div class="chat-container">
    <div class="chat-header">

        <div class="dropdown ms-auto">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Theme
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" data-theme="light">Light</a></li>
                <li><a class="dropdown-item" href="#" data-theme="dark">Dark</a></li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <label class="dropdown-item">
                        Chat Background
                        <input type="color" id="bgColorPicker" class="form-control form-control-color mt-1" title="Choose chat background color">
                    </label>
                </li>
            </ul>
        </div>


        <button id="toggleSelectModeBtn" class="btn btn-outline-primary">Select</button>
        <div id="bulkActions" style="display:none;" class="d-flex gap-2 align-items-center">
            <div class="dropdown">
                <button id="deleteSelectedMe" style="display:none;"></button>
                <button id="deleteSelectedAll" style="display:none;"></button>

                <button class="btn btn-light dropdown-toggle" type="button" id="bulkOptionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    ⋮
                </button>
                <ul class="dropdown-menu" aria-labelledby="bulkOptionsDropdown">
                    <li><a class="dropdown-item" id="bulkDeleteMe" href="#">Delete for me</a></li>
                    <li><a class="dropdown-item" id="bulkDeleteAll" href="#">Delete for everyone</a></li>
                    <li><a class="dropdown-item" id="bulkCopy" href="#">Copy</a></li>
                    <li><a class="dropdown-item" id="bulkExport" href="#">Export Chat</a></li>

                </ul>
            </div>
            <button id="cancelSelectBtn" class="btn btn-secondary" style="display: none;">Cancel</button>
        </div>



        <input type="hidden" id="senderId" value="@currentUserId" />
        <input type="hidden" id="receiverId" value="@chatUser.Id" />

        <div class="profile">
            <img src="@chatUser.ProfilePicture" alt="Profile Picture" class="profile-img" />
            @{
                DateTime lastSeen = Convert.ToDateTime(chatUser.LastSeen);
                string lastSeenText = "Last seen unknown";


                var diff = DateTime.UtcNow - lastSeen;

                if (diff.TotalSeconds < 1)
                {
                    lastSeenText = "Online now";
                }
                else if (diff.TotalMinutes < 5)
                {
                    lastSeenText = $"Last seen {Math.Floor(diff.TotalMinutes)} minutes ago";
                }
                else if (diff.TotalDays < 1)
                {
                    lastSeenText = $"Last seen today at {lastSeen.ToLocalTime():HH:mm}";
                }
                else
                {
                    lastSeenText = $"Last seen on {lastSeen.ToLocalTime():yyyy-MM-dd HH:mm}";
                }
            }

            <div class="d-flex flex-column">
                <h4>@chatUser.FirstName @chatUser.LastName</h4>
                <small class="">@lastSeenText</small>
            </div>

        </div>
    </div>

    @if (Model.Any(m => m.IsPinned))
    {
        var pinnedMsg = Model.First(m => m.IsPinned);
        <div id="pinnedMessageContainer" class="alert alert-warning">
            <strong>Pinned:</strong>
            <span>@pinnedMsg.Content</span>
            <button class="btn btn-sm btn-outline-dark float-end pin-message" data-id="@pinnedMsg.Id">
                @(pinnedMsg.IsPinned ? "Unpin" : "Pin")
            </button>
        </div>
    }
    else
    {
        <div id="pinnedMessageContainer" style="display:none;"></div>
    }

    <div id="messagesContainer" class="chat-messages">
        @foreach (var message in Model)
        {
            @Html.AntiForgeryToken()

            <div class="message @(message.SenderId == currentUserId ? "sent" : "received")"
                 data-id="@message.Id"
                 data-sender-id="@message.SenderId">
                <input type="checkbox" class="message-select-checkbox" style="display:none;" />
                <div class="message-header">
                    <div class="dropdown message-options">
                        <button class="dots-btn text-black" data-bs-toggle="dropdown" aria-expanded="false">⋮</button>
                        <ul class="dropdown-menu">
                            @if (message.SenderId == currentUserId)
                            {
                                <li><a class="dropdown-item edit-message" data-id="@message.Id" href="#">Edit</a></li>
                                <li><a class="dropdown-item delete-message" data-id="@message.Id" data-scope="me" href="#">Delete for me</a></li>
                                <li><a class="dropdown-item delete-message" data-id="@message.Id" data-scope="all" href="#">Delete for everyone</a></li>
                                <li><a class="dropdown-item info-message" data-id="@message.Id" href="#">Info</a></li>
                            }
                            else
                            {
                                <li><a class="dropdown-item pin-message" data-id="@message.Id" href="#">@(message.IsPinned ? "Unpin" : "Pin")</a></li>
                                <li><a class="dropdown-item copy-message" data-id="@message.Id" href="#">Copy</a></li>
                                <li><a class="dropdown-item delete-message" data-id="@message.Id" data-scope="me" href="#">Delete for me</a></li>
                            }
                        </ul>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(message.AudioPath))
                {
                    <audio controls>
                        <source src="@message.AudioPath" type="audio/webm" />
                        Your browser does not support the audio element.
                    </audio>
                }
                else
                {
                    <p style="white-space: pre-line;">@message.Content</p>
                }
                <p>@message.Content</p>

                @if (ViewBag.MessageReactions != null && ViewBag.MessageReactions.ContainsKey(message.Id))
                {
                    var reactions = ViewBag.MessageReactions[message.Id];
                    <div class="reaction-summary">
                        @foreach (var r in reactions)
                        {
                            @*                             <span class="reaction-count">${r.reaction} ${r.count}</span>
 *@
                            <span class="reaction-count" data-message-id="@message.Id" data-emoji="@r.Emoji" title="@string.Join(", ", r.Users)">
                                @r.Emoji @r.Count
                            </span>
                        }
                    </div>
                }
                else
                {
                    <div class="reaction-summary"></div>
                }

                <div class="reaction-bar">
                    <span class="emoji-option">👍</span>
                    <span class="emoji-option">❤️</span>
                    <span class="emoji-option">😂</span>
                    <span class="emoji-option">😮</span>
                    <span class="emoji-option">😢</span>

                </div>


                <small>
                    @message.SentAt.ToLocalTime().ToString("HH:mm")
                    @if (message.SenderId == currentUserId && message.IsRead)
                    {
                        <span title="Read">✅</span>
                    }
                </small>

            </div>
        }
    </div>




    <div class="chat-input">
        <textarea type="text" id="messageInput" placeholder="Write a message..." required></textarea>

        <div class="d-flex gap-1">
            <button id="recordAudioBtn" class="" type="button">🎙️</button>
            <span id="recordingIndicator" style="display: none; color: red;transform: translateY(20px);">
                Recording... <span id="countdownTimer">10</span>s
            </span>
        </div>

        <button type="button" id="emojiBtn">😊</button>

        <button id="sendButton" aria-label="Send message">
            <svg xmlns="http://www.w3.org/2000/svg" fill="white" width="20" height="20" viewBox="0 0 24 24">
                <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" />
            </svg>
        </button>
    </div>
</div>


@* div edit and delete and info massege *@
<div class="modal fade" id="editMessageModal" tabindex="-1" aria-labelledby="editMessageLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMessageLabel">Edit Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="editMessageInput" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">UnSave</button>
                <button type="button" id="saveEditBtn" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


@* div of info massege *@
<div id="messageInfoBox" class="alert alert-info position-relative" style="margin-top: 20px;">
    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" id="closeInfoBox" aria-label="close"></button>
    <div id="infoContent"></div>
</div>


<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 900px;
        margin: 0 auto;
        background-color: #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    .chat-header {
        display: flex;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #ddd;
        background-color: #132029;
    }

        .chat-header .profile {
            display: flex;
            align-items: center;
            gap: 15px;
        }

    .profile-img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    }

    .chat-header h4 {
        margin: 0;
        color: #fafafa;
        font-weight: 700;
        font-size: 1.25rem;
    }

    .chat-header small {
        font-size: 12px;
        color: #fafafa;
    }

    .chat-messages {
        flex-grow: 1;
        padding: 15px 20px;
        overflow-y: auto;
        background: url(https://blog.1a23.com/wp-content/uploads/sites/2/2020/02/Desktop.png) no-repeat;
    }

    .message {
        max-width: 70%;
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 15px;
        box-shadow: 0 1px 5px rgba(0,0,0,0.1);
        position: relative;
        font-size: 0.95rem;
        line-height: 1.3;
        word-wrap: break-word;
    }

        .message.sent {
            background-color: #dcf8c6;
            color: #222;
            margin-left: auto;
            border-bottom-right-radius: 0;
        }

        .message.received {
            background-color: #e9ecef;
            color: #333;
            margin-right: auto;
            border-bottom-left-radius: 0;
        }

        .message small {
            display: block;
            margin-top: 5px;
            font-size: 0.75rem;
            opacity: 0.7;
        }

            .message small span[title="Read"] {
                margin-left: 5px;
                color: #0d6efd;
            }

    .message-header {
        position: absolute;
        top: 5px;
        right: 8px;
    }

    .message.message-header .message-options button {
        color: #222;
    }

    .dots-btn {
        background: transparent;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: rgba(255,255,255,0.6);
    }

    <link rel="stylesheet" href="~/css/Chat.css" / >

    .message.sent .dots-btn {
        color: rgba(255,255,255,0.6);
    }

    .message.received .dots-btn {
        color: rgba(0,0,0,0.3);
    }

    .chat-input {
        display: flex;
        padding: 15px 20px;
        border-top: 1px solid #ddd;
        background-color: #132029;
    }

    #messageInput {
        flex-grow: 1;
        padding: 10px 15px;
        border-radius: 12px;
        border: 1px solid #ccc;
        font-size: 14px;
        outline: none;
        transition: border-color 0.3s ease;
    }

        #messageInput:focus {
            border-color: #0d6efd;
        }

    #emojiBtn, #sendButton, #recordAudioBtn {
        color: white;
        background: #132029;
        padding: 0 15px;
        margin-left: 10px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #emojiBtn {
        background: transparent;
        color: #0d6efd;
        font-size: 1.4rem;
        padding: 0 10px;
    }

    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background-color: rgba(0,0,0,0.1);
        border-radius: 4px;
    }

    .modal-content {
        border-radius: 8px;
    }

</style>


</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
               document.getElementById("sendButton").addEventListener("click", function () {
                   var sender = document.getElementById("senderId").value.trim(); // ID
            var receiver = document.getElementById("receiverId").value.trim();
            var messageContent = document.getElementById("messageInput").value.trim();
                   var sender = document.getElementById("senderId").value.trim(); // هذا هو ال Id
                if (!messageContent || !sender || !receiver) {
                    alert("Please provide Sender, Receiver, and Message.");
                    return;
                }

               connection.invoke("SendMessage", sender, receiver, messageContent)
            .catch(err => console.error(err));

                document.getElementById("messageInput").value = "";
            });
    </script>


    <!-- library for imojis -->
    <!-- مكتبة الإيموجي الجاهزة -->
    <!-- library for imojis -->
    <script src="https://unpkg.com/picmo@latest/dist/umd/index.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/picmo@latest/dist/styles.css">
    <script type="module">
        import 'https://cdn.jsdelivr.net/npm/emoji-picker-element@@^1/index.js';

        document.addEventListener('DOMContentLoaded', () => {
          const picker = document.createElement('emoji-picker');
          picker.style.position = 'absolute';
          picker.style.bottom = '60px';
          picker.style.right = '20px';
          picker.style.zIndex = '1000';
          picker.style.display = 'none';

          document.body.appendChild(picker);

          const input = document.querySelector('#messageInput');
          const emojiBtn = document.querySelector('#emojiBtn');

          emojiBtn.addEventListener('click', () => {
            picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
          });

          picker.addEventListener('emoji-click', event => {
            const emoji = event.detail.unicode;
            const start = input.selectionStart;
            const end = input.selectionEnd;
            input.value = input.value.slice(0, start) + emoji + input.value.slice(end);
            input.focus();
            input.selectionStart = input.selectionEnd = start + emoji.length;

          });


          document.addEventListener('click', (e) => {
            if (!picker.contains(e.target) && e.target !== emojiBtn) {
              picker.style.display = 'none';
            }
          });
        });

        $(document).on('click', '.delete-message', function (e) {
            e.preventDefault();
            const messageId = $(this).data('id');
            const messageElement = $(this).closest('.message');
            e.preventDefault();
            const messageId = $(this).data('id');
            const messageElement = $(this).closest('.message');

    </script>
    <script>
            const chatContainer = document.querySelector('.chat-container');
            const messageArea = document.querySelector('.chat-messages');
            $(document).on('click', '.edit-message', function (e) {
                 e.preventDefault();
                 const messageId = $(this).data('id');
                 const messageElement = $(this).closest('.message');
                 const originalContent = messageElement.find('p').text();
            // تحميل الثيم والخلفية عند بدء الصفحة
            const savedTheme = localStorage.getItem('chat-theme') || 'light';
            const savedBg = localStorage.getItem('chat-bg');
                 const messageId = $(this).data('id');
                 const messageElement = $(this).closest('.message');
                 const originalContent = messageElement.find('p').text();

                 const modal = new bootstrap.Modal(document.getElementById('editMessageModal'));
                 modal.show();
             });

             $(document).on('click', '#saveEditBtn', function () {
                const newContent = $('#editMessageInput').val();

                if (!newContent.trim()) {
                    alert('The message cannot be empty.');
                    return;
                }
            if (savedBg) {
                messageArea.style.backgroundColor = savedBg;
                colorPicker.value = savedBg;
            }
                    alert('The message cannot be empty.');
                $.post('/ContentCreator/Messages/EditMessage', {
                    id: editingMessageId,
                    content: newContent
                }, function () {
                    // تحديث النص في الرسالة المعروضة مباشرة بدون إعادة تحميل الصفحة
                    const messageElement = $(`.message[data-id="${editingMessageId}"]`);
                    messageElement.find('p').text(newContent);

                    // إخفاء المودال بعد التعديل
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editMessageModal'));
                    modal.hide();

                    // مسح متغير الرسالة التي يتم تعديلها
                    editingMessageId = null;
                });
            });

            $(document).on('click', '.info-message', function (e) {
                e.preventDefault();
                const messageId = $(this).data('id');

                $.get('/ContentCreator/Messages/MessageInfo', { id: messageId }, function (data) {
                    $('#infoContent').html(
                        `<strong>Sent:</strong> ${data.sentAt}<br>
                         <strong>State:</strong> ${data.isRead ? `✔️ Read<br><strong>Read At:</strong> ${data.readAt}` : '📭 Unread'}`
                    );

                    const box = $('#messageInfoBox');
                    box.stop(true, true).fadeIn(300);

                    setTimeout(() => {
                        box.fadeOut(300);
                    }, 3000);
                });
            });

            $('#closeInfoBox').on('click', function () {
                $('#messageInfoBox').fadeOut(300);
            // تغيير الثيم
            themeOptions.forEach(option => {
                option.addEventListener('click', (e) => {
                    e.preventDefault();
                    const selectedTheme = option.dataset.theme;
                    chatContainer.classList.remove('light', 'dark');
                    chatContainer.classList.add(selectedTheme);
                    localStorage.setItem('chat-theme', selectedTheme);
                });

            $('#closeInfoBox').on('click', function () {
                $('#messageInfoBox').fadeOut(300);
            });

        <script src="~/js/Chat.js"></script>

    <script>
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        let countdownInterval;
        const maxRecordingSeconds = 30;
        let secondsLeft = maxRecordingSeconds;

        $('#recordAudioBtn').on('click', async function () {
            if (!isRecording) {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    mediaRecorder = new MediaRecorder(stream);
                    audioChunks = [];
                    secondsLeft = maxRecordingSeconds;
                    $('#countdownTimer').text(secondsLeft);

                    mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            audioChunks.push(event.data);
                        }
                    };

                    mediaRecorder.onstop = () => {
                        clearInterval(countdownInterval);
                        $('#recordingIndicator').hide();
                        $(this).text("🎙️");
                        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                        uploadAudio(audioBlob);
                    };

                    mediaRecorder.start();
                    isRecording = true;
                    $('#recordingIndicator').show();
                    $(this).text("⏹️");

                    // Start countdown
                    countdownInterval = setInterval(() => {
                        secondsLeft--;
                        $('#countdownTimer').text(secondsLeft);
                        if (secondsLeft <= 0) {
                            mediaRecorder.stop(); // auto-stop
                        }
                    }, 1000);

                } catch (err) {
                    alert("🎙️ Microphone access denied.");
                    console.error(err);
                }
            } else {
                // Manual stop
                mediaRecorder.stop();
                isRecording = false;
            }
        });

        function uploadAudio(audioBlob) {
            const formData = new FormData();
            formData.append('audioFile', audioBlob, 'recording.webm');

            $.ajax({
                url: '/ContentCreator/Messages/SendAudioMessage',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function () {
                    console.log("✅ Audio sent!");
                },
                error: function () {
                    alert("❌ Failed to send audio.");
                }
            });
        }
    </script>



    </script>

}