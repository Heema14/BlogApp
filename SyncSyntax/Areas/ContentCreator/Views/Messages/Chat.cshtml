@model List<Message>
@{
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var chatUser = ViewBag.ChatUser;
}


<div class="chat-container">
    <div class="chat-header">
        <input type="hidden" id="senderId" value="@currentUserId" />
        <input type="hidden" id="receiverId" value="@chatUser.Id" />

        <div class="profile">
            <img src="@chatUser.ProfilePicture" alt="Profile Picture" class="profile-img" />
            @{
                DateTime lastSeen = Convert.ToDateTime(chatUser.LastSeen);
                string lastSeenText = "Last seen unknown";

                 
                var diff = DateTime.UtcNow - lastSeen;

                if (diff.TotalSeconds < 1)   
                {
                    lastSeenText = "Online now";
                }
                else if (diff.TotalMinutes < 5)
                {
                    lastSeenText = $"Last seen {Math.Floor(diff.TotalMinutes)} minutes ago";
                }
                else if (diff.TotalDays < 1)
                {
                    lastSeenText = $"Last seen today at {lastSeen.ToLocalTime():HH:mm}";
                }
                else
                {
                    lastSeenText = $"Last seen on {lastSeen.ToLocalTime():yyyy-MM-dd HH:mm}";
                }
            }

            <div class="d-flex flex-column">
                <h4>@chatUser.FirstName @chatUser.LastName</h4>
                <small class="">@lastSeenText</small>
            </div>

        </div>
    </div>

    <div id="messagesContainer" class="chat-messages">
        @foreach (var message in Model)
        {
            <div class="message @(message.SenderId == currentUserId ? "sent" : "received")" data-id="@message.Id">
                <div class="message-header">
                    @if (message.SenderId == currentUserId)
                    {
                    <div class="dropdown message-options">
                        <button class="dots-btn text-black" data-bs-toggle="dropdown" aria-expanded="false">⋮</button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item edit-message" data-id="@message.Id" href="#">Edit</a></li>
                            <li><a class="dropdown-item delete-message" data-id="@message.Id" href="#">Delete</a></li>

                                <li><a class="dropdown-item info-message" data-id="@message.Id" href="#">Info</a></li>
                            
                        </ul>
                    </div>
                    }
                </div>
                <p>@message.Content</p>
                <small>
                    @message.SentAt.ToLocalTime().ToString("HH:mm")
                    @if (message.SenderId == currentUserId && message.IsRead)
                    {
                        <span title="Read">✅</span>
                    }
                </small>
            </div>
        }
    </div>



    <div class="chat-input">
        <textarea type="text" id="messageInput" placeholder="Write a message..." required></textarea>
        <button type="button" id="emojiBtn">😊</button>
        <button id="sendButton" aria-label="Send message">
            <svg xmlns="http://www.w3.org/2000/svg" fill="white" width="20" height="20" viewBox="0 0 24 24">
                <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" />
            </svg>
        </button>
    </div>
</div>


<div class="modal fade" id="editMessageModal" tabindex="-1" aria-labelledby="editMessageLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMessageLabel">Edit Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="editMessageInput" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">UnSave</button>
                <button type="button" id="saveEditBtn" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


<div id="messageInfoBox" class="alert alert-info position-relative" style="margin-top: 20px;">
    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" id="closeInfoBox" aria-label="close"></button>
    <div id="infoContent"></div>
</div>


<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 900px;
        margin: 0 auto;
        background-color: #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    /* الهيدر فوق */
    .chat-header {
        display: flex;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #ddd;
        background-color: #132029;
    }

        .chat-header .profile {
            display: flex;
            align-items: center;
            gap: 15px;
        }

    .profile-img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    }

    .chat-header h4 {
        margin: 0;
        color: #fafafa;
        font-weight: 700;
        font-size: 1.25rem;
    }

    .chat-header small {
        font-size: 12px;
        color: #fafafa;
    }

    /* حاوية الرسائل */
    .chat-messages {
        flex-grow: 1;
        padding: 15px 20px;
        overflow-y: auto;
        background: url(https://blog.1a23.com/wp-content/uploads/sites/2/2020/02/Desktop.png) no-repeat;
    }

        .chat-messages p {
            white-space: pre-line;
        }
    /* فقاعات الرسائل */
    .message {
        max-width: 70%;
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 15px;
        box-shadow: 0 1px 5px rgba(0,0,0,0.1);
        position: relative;
        font-size: 0.95rem;
        line-height: 1.3;
        word-wrap: break-word;
    }

        /* رسائل المرسل: يمين */
        .message.sent {
            background-color: #dcf8c6;
            color: #222;
            margin-left: auto;
            border-bottom-right-radius: 0;
        }

        /* رسائل المستلم: يسار */
        .message.received {
            background-color: #e9ecef;
            color: #333;
            margin-right: auto;
            border-bottom-left-radius: 0;
        }

        /* توقيت الرسالة */
        .message small {
            display: block;
            margin-top: 5px;
            font-size: 0.75rem;
            opacity: 0.7;
        }

            /* علامة قراءة الرسالة */
            .message small span[title="Read"] {
                margin-left: 5px;
                color: #0d6efd;
            }

    /* قائمة خيارات الرسالة (⋮) */
    .message-header {
        position: absolute;
        top: 5px;
        right: 8px;
    }

    .dots-btn {
        background: transparent;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: rgba(255,255,255,0.6);
    }

    .message.sent .dots-btn {
        color: rgba(255,255,255,0.6);
    }

    .message.received .dots-btn {
        color: rgba(0,0,0,0.3);
    }

    /* صندوق الإدخال */
    .chat-input {
        display: flex;
        padding: 15px 20px;
        border-top: 1px solid #ddd;
        background-color: #132029;
    }

    #messageInput {
        flex-grow: 1;
        padding: 10px 15px;
        border-radius: 12px;
        border: 1px solid #ccc;
        font-size: 14px;
        outline: none;
        transition: border-color 0.3s ease;
    }

        #messageInput:focus {
            border-color: #0d6efd;
        }

    #emojiBtn, #sendButton {
        color: white;
        background: #132029;
        padding: 0 15px;
        margin-left: 10px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #emojiBtn {
        background: transparent;
        color: #0d6efd;
        font-size: 1.4rem;
        padding: 0 10px;
    }

    /* scrollbar بسيط */
    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background-color: rgba(0,0,0,0.1);
        border-radius: 4px;
    }

    /* ضبط مودال التحرير (مو شغلنا لكن حبيت أذكره) */
    .modal-content {
        border-radius: 8px;
    }

</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

    <script>

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();


        connection.start().then(function () {
            console.log("Connected to SignalR Hub!");
        }).catch(function (err) {
            console.error("SignalR connection failed: " + err.toString());
        });



             connection.on("ReceiveMessage", function (sender, message, messageId, sentAt, isRead) {
            var messageContainer = document.getElementById("messagesContainer");
            var messageElement = document.createElement("div");

            var currentUserId = document.getElementById("senderId").value;

            var isSent = sender === currentUserId;

            messageElement.classList.add("message");
            messageElement.classList.add(isSent ? "sent" : "received");

             
            messageElement.setAttribute('data-id', messageId);

                messageElement.innerHTML = `
            <div class="message-header">
                <div class="dropdown message-options">
                    <button class="dots-btn text-black" data-bs-toggle="dropdown" aria-expanded="false">⋮</button>
                    <ul class="dropdown-menu" style="direction: rtl;">
                        ${isSent ? `
                        <li><a class="dropdown-item edit-message" data-id="${messageId}" href="#">Edit</a></li>
                        <li><a class="dropdown-item delete-message" data-id="${messageId}" href="#">Delete</a></li>
                        <li><a class="dropdown-item info-message" data-id="${messageId}" href="#">Info</a></li>
                        ` : ""}
                    </ul>
                </div>
            </div>
            <p>${message}</p>
            <small>
                ${new Date(sentAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                ${isSent && isRead ? '<span title="Read">✅</span>' : ''}
            </small>
        `;

        messageContainer.appendChild(messageElement);
        bootstrap.Dropdown.getOrCreateInstance(messageElement.querySelector('[data-bs-toggle="dropdown"]'));
        messageContainer.scrollTop = messageContainer.scrollHeight;

        });


           document.getElementById("sendButton").addEventListener("click", function () {
               var sender = document.getElementById("senderId").value.trim();  
        var receiver = document.getElementById("receiverId").value.trim();
        var messageContent = document.getElementById("messageInput").value.trim();

            if (!messageContent || !sender || !receiver) {
                alert("Please provide Sender, Receiver, and Message.");
                return;
            }

           connection.invoke("SendMessage", sender, receiver, messageContent)
        .catch(err => console.error(err));

            document.getElementById("messageInput").value = "";
        });
    </script>


    <!-- مكتبة الإيموجي الجاهزة -->
    <script src="https://unpkg.com/picmo@latest/dist/umd/index.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/picmo@latest/dist/styles.css">
    <script type="module">
        import 'https://cdn.jsdelivr.net/npm/emoji-picker-element@@^1/index.js';

        document.addEventListener('DOMContentLoaded', () => {
          const picker = document.createElement('emoji-picker');
          picker.style.position = 'absolute';
          picker.style.bottom = '60px';
          picker.style.right = '20px';
          picker.style.zIndex = '1000';
          picker.style.display = 'none';

          document.body.appendChild(picker);

          const input = document.querySelector('#messageInput');
          const emojiBtn = document.querySelector('#emojiBtn');

          emojiBtn.addEventListener('click', () => {
            picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
          });

          picker.addEventListener('emoji-click', event => {
            const emoji = event.detail.unicode;
            const start = input.selectionStart;
            const end = input.selectionEnd;
            input.value = input.value.slice(0, start) + emoji + input.value.slice(end);
            input.focus();
            input.selectionStart = input.selectionEnd = start + emoji.length;
           
          });

          
          document.addEventListener('click', (e) => {
            if (!picker.contains(e.target) && e.target !== emojiBtn) {
              picker.style.display = 'none';
            }
          });
        });





    </script>

    <script>

        let editingMessageId = null;

            $(document).on('click', '.delete-message', function (e) {
            e.preventDefault();
            const messageId = $(this).data('id');
            const messageElement = $(this).closest('.message');

            if (confirm("Are you sure you want to delete the message?")) {
                $.post('/ContentCreator/Messages/DeleteMessage', { id: messageId }, function () {

                    messageElement.remove();
                });
            }
        });

         $(document).on('click', '.edit-message', function (e) {
             e.preventDefault();
             const messageId = $(this).data('id');
             const messageElement = $(this).closest('.message');
             const originalContent = messageElement.find('p').text();

             $('#editMessageInput').val(originalContent);
             editingMessageId = messageId;

             const modal = new bootstrap.Modal(document.getElementById('editMessageModal'));
             modal.show();
         });

           $(document).on('click', '#saveEditBtn', function () {
            const newContent = $('#editMessageInput').val();

            if (!newContent.trim()) {
                alert('The message cannot be empty.');
                return;
            }

            $.post('/ContentCreator/Messages/EditMessage', {
                id: editingMessageId,
                content: newContent
            }, function () {

                const messageElement = $(`.message[data-id="${editingMessageId}"]`);
                messageElement.find('p').text(newContent);


                const modal = bootstrap.Modal.getInstance(document.getElementById('editMessageModal'));
                modal.hide();


                editingMessageId = null;
            });
        });

                $(document).on('click', '.info-message', function (e) {
            e.preventDefault();
            const messageId = $(this).data('id');

            $.get('/ContentCreator/Messages/MessageInfo', { id: messageId }, function (data) {
                $('#infoContent').html(
                    `<strong>Sent:</strong> ${data.sentAt}<br>
                     <strong>State:</strong> ${data.isRead ? `✔️ Read<br><strong>Read At:</strong> ${data.readAt}` : '📭 Unread'}`
                );

                const box = $('#messageInfoBox');
                box.stop(true, true).fadeIn(300);

                setTimeout(() => {
                    box.fadeOut(300);
                }, 3000);
            });
        });


        $('#closeInfoBox').on('click', function () {
            $('#messageInfoBox').fadeOut(300);
        });
    </script>

}