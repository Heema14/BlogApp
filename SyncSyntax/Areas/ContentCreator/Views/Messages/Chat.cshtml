@model List<Message>
@{
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var chatUser = ViewBag.ChatUser;
    var pinnedMessage = ViewBag.PinnedMessage as Message;
}


<div class="chat-container">
    <div class="chat-header">
        

        <button id="toggleSelectModeBtn" class="btn btn-outline-primary">Select</button>
        <div id="bulkActions" style="display:none;" class="d-flex gap-2 align-items-center">
            <div class="dropdown">
                <button id="deleteSelectedMe" style="display:none;"></button>
                <button id="deleteSelectedAll" style="display:none;"></button>

                <button class="btn btn-light dropdown-toggle" type="button" id="bulkOptionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    ⋮
                </button>
                <ul class="dropdown-menu" aria-labelledby="bulkOptionsDropdown">
                    <li><a class="dropdown-item" id="bulkDeleteMe" href="#">Delete for me</a></li>
                    <li><a class="dropdown-item" id="bulkDeleteAll" href="#">Delete for everyone</a></li>
                    <li><a class="dropdown-item" id="bulkCopy" href="#">Copy</a></li>
                    <li><a class="dropdown-item" id="bulkExport" href="#">Export Chat</a></li>

                </ul>
            </div>
            <button id="cancelSelectBtn" class="btn btn-secondary" style="display: none;">Cancel</button>
        </div>



        <input type="hidden" id="senderId" value="@currentUserId" />
        <input type="hidden" id="receiverId" value="@chatUser.Id" />

        <div class="profile">
            <img src="@chatUser.ProfilePicture" alt="Profile Picture" class="profile-img" />
            @{
                DateTime lastSeen = Convert.ToDateTime(chatUser.LastSeen);
                string lastSeenText = "Last seen unknown";


                var diff = DateTime.UtcNow - lastSeen;

                if (diff.TotalSeconds < 1)
                {
                    lastSeenText = "Online now";
                }
                else if (diff.TotalMinutes < 5)
                {
                    lastSeenText = $"Last seen {Math.Floor(diff.TotalMinutes)} minutes ago";
                }
                else if (diff.TotalDays < 1)
                {
                    lastSeenText = $"Last seen today at {lastSeen.ToLocalTime():HH:mm}";
                }
                else
                {
                    lastSeenText = $"Last seen on {lastSeen.ToLocalTime():yyyy-MM-dd HH:mm}";
                }
            }

            <div class="d-flex flex-column">
                <h4>@chatUser.FirstName @chatUser.LastName</h4>
                <small class="">@lastSeenText</small>
            </div>

        </div>
    </div>

    @if (Model.Any(m => m.IsPinned))
    {
        var pinnedMsg = Model.First(m => m.IsPinned);
        <div id="pinnedMessageContainer" class="alert alert-warning">
            <strong>Pinned:</strong>
            <span>@pinnedMsg.Content</span>
            <button class="btn btn-sm btn-outline-dark float-end pin-message" data-id="@pinnedMsg.Id">
                @(pinnedMsg.IsPinned ? "Unpin" : "Pin")
            </button>
        </div>
    }
    else
    {
        <div id="pinnedMessageContainer" style="display:none;"></div>
    }

    <div id="messagesContainer" class="chat-messages">
        @foreach (var message in Model)
        {
            @Html.AntiForgeryToken()

            <div class="message @(message.SenderId == currentUserId ? "sent" : "received")"
                 data-id="@message.Id"
                 data-sender-id="@message.SenderId">
                <input type="checkbox" class="message-select-checkbox" style="display:none;" />
                <div class="message-header">
                    <div class="dropdown message-options">
                        <button class="dots-btn text-black" data-bs-toggle="dropdown" aria-expanded="false">⋮</button>
                        <ul class="dropdown-menu">
                            @if (message.SenderId == currentUserId)
                            {
                                <li><a class="dropdown-item edit-message" data-id="@message.Id" href="#">Edit</a></li>
                                <li><a class="dropdown-item delete-message" data-id="@message.Id" data-scope="me" href="#">Delete for me</a></li>
                                <li><a class="dropdown-item delete-message" data-id="@message.Id" data-scope="all" href="#">Delete for everyone</a></li>
                                <li><a class="dropdown-item info-message" data-id="@message.Id" href="#">Info</a></li>
                            }
                            else
                            {
                                <li><a class="dropdown-item pin-message" data-id="@message.Id" href="#">@(message.IsPinned ? "Unpin" : "Pin")</a></li>
                                <li><a class="dropdown-item copy-message" data-id="@message.Id" href="#">Copy</a></li>
                                <li><a class="dropdown-item delete-message" data-id="@message.Id" data-scope="me" href="#">Delete for me</a></li>
                            }
                        </ul>
                    </div>
                </div>
                <p>@message.Content</p>

                @if (ViewBag.MessageReactions != null && ViewBag.MessageReactions.ContainsKey(message.Id))
                {
                    var reactions = ViewBag.MessageReactions[message.Id];
                    <div class="reaction-summary">
                        @foreach (var r in reactions)
                        {
                            @*                             <span class="reaction-count">${r.reaction} ${r.count}</span>
 *@
                            <span class="reaction-count" data-message-id="@message.Id" data-emoji="@r.Emoji" title="@string.Join(", ", r.Users)">
                                @r.Emoji @r.Count
                            </span>
                        }
                    </div>
                }
                else
                {
                    <div class="reaction-summary"></div>
                }

                <div class="reaction-bar">
                    <span class="emoji-option">👍</span>
                    <span class="emoji-option">❤️</span>
                    <span class="emoji-option">😂</span>
                    <span class="emoji-option">😮</span>
                    <span class="emoji-option">😢</span>
                   
                </div>


                <small>
                    @message.SentAt.ToLocalTime().ToString("HH:mm")
                    @if (message.SenderId == currentUserId && message.IsRead)
                    {
                        <span title="Read">✅</span>
                    }
                </small>
            </div>
        }
    </div>




    <div class="chat-input">
        <textarea type="text" id="messageInput" placeholder="Write a message..." required></textarea>
        <button type="button" id="emojiBtn">😊</button>
        <button id="sendButton" aria-label="Send message">
            <svg xmlns="http://www.w3.org/2000/svg" fill="white" width="20" height="20" viewBox="0 0 24 24">
                <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" />
            </svg>
        </button>
    </div>
</div>


<div class="modal fade" id="editMessageModal" tabindex="-1" aria-labelledby="editMessageLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMessageLabel">Edit Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="editMessageInput" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">UnSave</button>
                <button type="button" id="saveEditBtn" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


<div id="messageInfoBox" class="alert alert-info position-relative" style="margin-top: 20px;">
    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" id="closeInfoBox" aria-label="close"></button>
    <div id="infoContent"></div>
</div>


<link rel="stylesheet" href="~/css/Chat.css" />

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>




    <!-- مكتبة الإيموجي الجاهزة -->
    <script src="https://unpkg.com/picmo@latest/dist/umd/index.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/picmo@latest/dist/styles.css">
    <script type="module">
        import 'https://cdn.jsdelivr.net/npm/emoji-picker-element@@^1/index.js';

        document.addEventListener('DOMContentLoaded', () => {
          const picker = document.createElement('emoji-picker');
          picker.style.position = 'absolute';
          picker.style.bottom = '60px';
          picker.style.right = '20px';
          picker.style.zIndex = '1000';
          picker.style.display = 'none';

          document.body.appendChild(picker);

          const input = document.querySelector('#messageInput');
          const emojiBtn = document.querySelector('#emojiBtn');

          emojiBtn.addEventListener('click', () => {
            picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
          });

          picker.addEventListener('emoji-click', event => {
            const emoji = event.detail.unicode;
            const start = input.selectionStart;
            const end = input.selectionEnd;
            input.value = input.value.slice(0, start) + emoji + input.value.slice(end);
            input.focus();
            input.selectionStart = input.selectionEnd = start + emoji.length;

          });


          document.addEventListener('click', (e) => {
            if (!picker.contains(e.target) && e.target !== emojiBtn) {
              picker.style.display = 'none';
            }
          });
        });





    </script>

    <script src="~/js/Chat.js"></script>

}