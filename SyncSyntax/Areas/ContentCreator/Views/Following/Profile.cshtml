 @model ProfileViewModel
@{
    var currentUserId = User.Identity.Name;
}

<style>
    .profile-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 30px;
    }

    .profile-picture {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ddd;
    }

    .profile-actions {
        margin-top: 10px;
        display: flex;
        gap: 10px;
    }

        .profile-actions a {
            padding: 5px 15px;
            text-decoration: none;
            border: 1px solid #ccc;
            background-color: white;
            color: #222;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
            border-radius: 5px;
        }

            .profile-actions a:hover {
                background-color: #222;
                color: #fff;
            }

    .profile-username {
        font-weight: bold;
        margin-top: 10px;
        font-size: 18px;
    }

    .profile-bio {
        text-align: center;
        font-size: 14px;
        margin-top: 5px;
        max-width: 300px;
    }

    .profile-stats {
        display: flex;
        justify-content: center;
        gap: 25px;
        margin-top: 15px;
        font-size: 15px;
    }

    .new-post-circle {
        width: 70px;
        height: 70px;
        border: 2px solid #ccc;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 30px;
        color: #888;
        margin: 30px auto 10px;
        cursor: pointer;
    }

    .posts-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 15px;
        margin-top: 20px;
        padding: 0 30px 50px;
    }

    .post img {
        width: 100%;
        height: auto;
        border-radius: 8px;
    }

    .nav-tabs-custom {
        display: flex;
        justify-content: center;
        gap: 40px;
        font-weight: bold;
        border-top: 1px solid #eee;
        border-bottom: 1px solid #eee;
        padding: 10px 0;
        margin: 20px 0;
    }

        .nav-tabs-custom span {
            cursor: pointer;
            color: #333;
        }
</style>

<div class="profile-header">
    <img src="@(!string.IsNullOrEmpty(Model.User.ProfilePicture) ? Model.User.ProfilePicture : "/images/uploadImgs/default-image.jpg")" alt="Profile Picture" class="profile-picture">

    <div class="profile-username">@Model.User.UserName</div>
    <div class="profile-bio">
        <div>@Model.User.Bio</div>
    </div>

    @if (currentUserId == Model.User.UserName)
    {
        <div class="profile-actions">
            <a asp-action="EditProfile" asp-area="" asp-controller="Auth">Edit Profile</a>
        </div>
    }
    else
    {
        @if (Model.IsFollowing)
        {
            <form asp-controller="Following" asp-action="Unfollow" asp-route-userId="@Model.User.Id" method="post">
                @Html.AntiForgeryToken()
                <button type="submit" class="icon-expand-btn" data-hover-text="UnFollow">
                    <i class="bi bi-person-dash me-1 svgIcon"></i>
                </button>
            </form>
        }
        else
        {
            <form asp-controller="Following" asp-action="Follow" asp-route-userId="@Model.User.Id" method="post">
                @Html.AntiForgeryToken()
                <button type="submit" class="icon-expand-btn" data-hover-text="Follow">
                    <i class="bi bi-person-plus me-1 svgIcon"></i>
                </button>
            </form>
        }
    }
    <div class="profile-stats">
        <strong><span>@Model.PostsCount Articles</span></strong>
        <strong><span>@Model.FollowersCount Followers</span></strong>
        <strong><span>@Model.FollowingCount Following</span></strong>
    </div>
</div>


@if (currentUserId == Model.User.UserName)
{
    <div class="text-end mb-4">
        <a asp-action="Create" asp-controller="Post" class="icon-expand-btn" data-hover-text="Create New Post"  >
            <i class="bi bi-plus-circle svgIcon"></i>
        </a>
    </div>
}

 
<div class="nav-tabs-custom">
    <span>Articles</span>

</div>

<!-- Explore Content -->
<section class="col-12 col-md-9 col-lg-10 explore-grid">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">

        @foreach (var post in Model.Posts)
        {
            <div class="col">

                <div class="card h-100 border-0 shadow-lg rounded-4 overflow-hidden">

                    <!-- Post Image -->
                    <div class="overflow-hidden position-relative" style="height: 220px;">
                        <img src="@(!string.IsNullOrEmpty(post.FeatureImagePath) ? post.FeatureImagePath : "/images/default-image.jpg")"
                             class="card-img-top h-100 w-100 object-fit-cover transition"
                             alt="@post.Title"
                             style="transition: transform 0.3s ease;" />

                        <!-- Overlay -->
                        <a data-bs-toggle="modal" data-bs-target="#postModal" data-id="@post.Id"
                           class="read-more-overlay d-flex justify-content-center align-items-center text-white text-decoration-none">
                            <span class="fs-6 fw-semibold"><i class="bi bi-book me-2"></i>Read More</span>
                        </a>
                    </div>

                    <div class="card-body">
                        <!-- User Info (Above Title) -->
                        <div class="d-flex align-items-center justify-content-between mb-3">

                            <div class="d-flex align-items-center gap-2 actions">
                                @if (post.UserId == Model.CurrentUserId)
                                {
                                    <button class="icon-expand-btn" onclick="confirmDelete(@post.Id)" data-hover-text="Delete" style="background-color: #dc3545;">
                                        <i class="bi bi-trash3-fill svgIcon"></i>
                                    </button>
                                    <button class="icon-expand-btn" onclick="location.href='@Url.Action("Edit", "Post", new { id = post.Id })'" data-hover-text="Edit" style="background-color: #0d6efd;">
                                        <i class="bi bi-pencil-square svgIcon"></i>
                                    </button>
                                    <button class="icon-expand-btn"
                                            onclick="togglePublishStatus(this)"
                                            data-id="@post.Id"
                                            data-status="@post.IsPublished.ToString().ToLower()"
                                            data-hover-text="@(post.IsPublished ? "Unpublish" : "Publish")"
                                            style="background-color: @(post.IsPublished ? "#6c757d" : "#198754")">
                                        <i class="bi @(post.IsPublished ? "bi-eye" : "bi-eye-slash") svgIcon"></i>
                                    </button>
 
                                }
                            </div>


                        </div>

                        <!-- Post Title and Likes -->
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title fw-bold">@post.Title</h5>
                            <div class="d-flex align-items-center gap-1" style="cursor: pointer;">
                                <i class="bi bi-heart-fill" style="color: @(post.LikesCount > 0 ? "red" : "gray");"></i>
                                <span>@post.LikesCount</span>
                            </div>
                        </div>

                        <p class="text-muted mb-2 DatePost">
                            <i class="bi bi-calendar-event me-1"></i>
                            @post.PublishedDate.ToString("MMMM dd, yyyy")
                        </p>

                        @{
                            var contentTag = HtmlTagHelper.RemoveHtmlTags(post.Content);
                            var preview = contentTag.Length > 100 ? contentTag.Substring(0, 100) + "..." : contentTag;
                        }

                        <p class="card-text text-black">@preview</p>

                        @if (post.Category != null)
                        {
                            <span class="badge bg-info text-dark mt-2">
                                <i class="bi bi-tag me-1"></i> @post.Category.Name
                            </span>
                        }
                    </div>

                </div>

            </div>
        }
    </div>

    <!-- Modal -->
    <div class="modal fade" id="postModal" tabindex="-1" aria-labelledby="postModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <h5 class="modal-title" id="postModalLabel">Post Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <!-- Modal Body -->
                <div class="modal-body">
                </div>
            </div>
        </div>
    </div>
</section>



@section Scripts {
    <script>
        function confirmDelete(postId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'This post will be deleted permanently!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '@Url.Action("Delete", "Post", new { id = "__POST_ID__" })'.replace('__POST_ID__', postId);
                }
            });
        }



        $(document).ready(function () {
            $('#postModal').on('show.bs.modal', function (e) {
                var button = $(e.relatedTarget);
                var postId = button.data('id');
                var modalBody = $(this).find('.modal-body');
                modalBody.html('<div class="text-center"><i class="fa fa-spinner fa-spin"></i> Loading...</div>');

                // AJAX request to fetch post details
                $.ajax({
                    url: '@Url.Action("Detail", "Post")/' + postId,
                    type: 'GET',
                    success: function (response) {
                        modalBody.html(response);
                    },
                    error: function () {
                        modalBody.html('<p class="text-danger">Failed to load post details.</p>');
                    }
                });
            });
        });

        function togglePublishStatus(postId, currentStatus) {
            var isPublished = JSON.parse(currentStatus);

            $.ajax({
                url: '@Url.Action("TogglePublishStatus", "Post")',
                type: 'POST',
                data: { postId: postId },
                success: function(response) {
                    if (response.success) {
                        var iconElement = $("button[data-id='" + postId + "'] i");

                        if (response.isPublished) {
                            toastr.success("Post has been published and notifications sent.");
                            iconElement.removeClass('bi-eye-slash').addClass('bi-eye');
                        } else {
                            toastr.info("Post has been unpublished.");
                            iconElement.removeClass('bi-eye').addClass('bi-eye-slash');
                        }
                    } else {
                            toastr.error("Something went wrong. Try again.");
                    }
                },
                error: function() {
                        toastr.error("Server error. Please check your connection.");
                    // alert("There was an error connecting to the server..");
                }
            });
                }function togglePublishStatus(button) {
                var postId = $(button).data("id");

                $.ajax({
                    url: '@Url.Action("TogglePublishStatus", "Post")',
                    type: 'POST',
                    data: { postId: postId },
                    success: function (response) {
                        if (response.success) {
                            var icon = $(button).find("i");

                            if (response.isPublished) {
                                toastr.success("Post has been published and notifications sent.");
                                icon.removeClass("bi-eye-slash").addClass("bi-eye");
                                $(button).data("status", "true");
                                $(button).attr("data-hover-text", "Unpublish");
                                $(button).css("background-color", "#6c757d");
                            } else {
                                toastr.info("Post has been unpublished.");
                                icon.removeClass("bi-eye").addClass("bi-eye-slash");
                                $(button).data("status", "false");
                                $(button).attr("data-hover-text", "Publish");
                                $(button).css("background-color", "#198754");
                            }
                        } else {
                            toastr.error("Something went wrong. Try again.");
                        }
                    },
                    error: function () {
                        toastr.error("Server error. Please check your connection.");
                    }
                });
            }


    </script>
}
